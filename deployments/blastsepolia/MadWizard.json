{
  "address": "0x0662B8E5ac3D59e02B0e0d8A6B9317eD3F4676C3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[3]",
          "name": "genTokenUris",
          "type": "string[3]"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MadWizard__AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MadWizard__MaxSupplyReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MadWizard__RangeOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MadWizard__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NftMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BLAST",
      "outputs": [
        {
          "internalType": "contract IBlast",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDB",
      "outputs": [
        {
          "internalType": "contract IERC20Rebasing",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IERC20Rebasing",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claimMyContractsAllYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimMyContractsGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimMyContractsYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChanceArray",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moddedRng",
          "type": "uint256"
        }
      ],
      "name": "getDestinyFromModdedRng",
      "outputs": [
        {
          "internalType": "enum MadWizard.Destiny",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getgenTokenUris",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestNft",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x037958cfa5d6503aef09935a9d28ea5cc2ed6d9bcd90c7474cf06e1503cf6254",
  "receipt": {
    "to": null,
    "from": "0xdaaEd1F389a89da771e0516ce2d0da018A92913b",
    "contractAddress": "0x0662B8E5ac3D59e02B0e0d8A6B9317eD3F4676C3",
    "transactionIndex": 8,
    "gasUsed": "3887950",
    "logsBloom": "0x
    "blockHash": "0x1e31dbf769f72fdf3bed1aef4ee6f0f019b4a020ed0e88c890f5c388833e8e73",
    "transactionHash": "0x037958cfa5d6503aef09935a9d28ea5cc2ed6d9bcd90c7474cf06e1503cf6254",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 1278207,
        "transactionHash": "0x037958cfa5d6503aef09935a9d28ea5cc2ed6d9bcd90c7474cf06e1503cf6254",
        "address": "0x0662B8E5ac3D59e02B0e0d8A6B9317eD3F4676C3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000daaed1f389a89da771e0516ce2d0da018a92913b"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x1e31dbf769f72fdf3bed1aef4ee6f0f019b4a020ed0e88c890f5c388833e8e73"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 1278207,
        "transactionHash": "0x037958cfa5d6503aef09935a9d28ea5cc2ed6d9bcd90c7474cf06e1503cf6254",
        "address": "0x4200000000000000000000000000000000000022",
        "topics": [
          "0xcaa97ab28bae75adcb5a02786c64b44d0d3139aa521bf831cdfbe280ef246e36",
          "0x0000000000000000000000000662b8e5ac3d59e02b0e0d8a6b9317ed3f4676c3"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 7,
        "blockHash": "0x1e31dbf769f72fdf3bed1aef4ee6f0f019b4a020ed0e88c890f5c388833e8e73"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 1278207,
        "transactionHash": "0x037958cfa5d6503aef09935a9d28ea5cc2ed6d9bcd90c7474cf06e1503cf6254",
        "address": "0x4200000000000000000000000000000000000023",
        "topics": [
          "0xcaa97ab28bae75adcb5a02786c64b44d0d3139aa521bf831cdfbe280ef246e36",
          "0x0000000000000000000000000662b8e5ac3d59e02b0e0d8a6b9317ed3f4676c3"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 8,
        "blockHash": "0x1e31dbf769f72fdf3bed1aef4ee6f0f019b4a020ed0e88c890f5c388833e8e73"
      }
    ],
    "blockNumber": 1278207,
    "cumulativeGasUsed": "4417992",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "ipfs://QmTMX9unFh63hB5roi3pkbqhhh4WeGYPVbtAp26KzGovry",
      "ipfs://QmcX2Ecd3JeDqFbwEszt2VFdGaHRWGwLWurQMpvXjA8YWp",
      "ipfs://QmdQynkwAe81AKsWR6cFwYaFAxn8aGfvxz459LtbBNMYoe"
    ],
    999
  ],
  "numDeployments": 1,
  "solcInputHash": "86d67850c266ecd0415e32b7536c2956",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string[3]\",\"name\":\"genTokenUris\",\"type\":\"string[3]\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MadWizard__AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MadWizard__MaxSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MadWizard__RangeOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MadWizard__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLAST\",\"outputs\":[{\"internalType\":\"contract IBlast\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDB\",\"outputs\":[{\"internalType\":\"contract IERC20Rebasing\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20Rebasing\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimMyContractsAllYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMyContractsGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimMyContractsYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChanceArray\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moddedRng\",\"type\":\"uint256\"}],\"name\":\"getDestinyFromModdedRng\",\"outputs\":[{\"internalType\":\"enum MadWizard.Destiny\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getgenTokenUris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MadWizard.sol\":\"MadWizard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/MadWizard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror MadWizard__AlreadyInitialized();\\nerror MadWizard__RangeOutOfBounds();\\nerror MadWizard__TransferFailed();\\nerror MadWizard__MaxSupplyReached();\\n\\nenum YieldMode {\\n    AUTOMATIC,\\n    VOID,\\n    CLAIMABLE\\n}\\n\\nenum GasMode {\\n    VOID,\\n    CLAIMABLE \\n}\\n\\ninterface IBlast{\\n    // configure\\n    function configureContract(address contractAddress, YieldMode _yield, GasMode gasMode, address governor) external;\\n    function configure(YieldMode _yield, GasMode gasMode, address governor) external;\\n\\n    // base configuration options\\n    function configureClaimableYield() external;\\n    function configureClaimableYieldOnBehalf(address contractAddress) external;\\n    function configureAutomaticYield() external;\\n    function configureAutomaticYieldOnBehalf(address contractAddress) external;\\n    function configureVoidYield() external;\\n    function configureVoidYieldOnBehalf(address contractAddress) external;\\n    function configureClaimableGas() external;\\n    function configureClaimableGasOnBehalf(address contractAddress) external;\\n    function configureVoidGas() external;\\n    function configureVoidGasOnBehalf(address contractAddress) external;\\n    function configureGovernor(address _governor) external;\\n    function configureGovernorOnBehalf(address _newGovernor, address contractAddress) external;\\n\\n    // claim yield\\n    function claimYield(address contractAddress, address recipientOfYield, uint256 amount) external returns (uint256);\\n    function claimAllYield(address contractAddress, address recipientOfYield) external returns (uint256);\\n\\n    // claim gas\\n    function claimAllGas(address contractAddress, address recipientOfGas) external returns (uint256);\\n    function claimGasAtMinClaimRate(address contractAddress, address recipientOfGas, uint256 minClaimRateBips) external returns (uint256);\\n    function claimMaxGas(address contractAddress, address recipientOfGas) external returns (uint256);\\n    function claimGas(address contractAddress, address recipientOfGas, uint256 gasToClaim, uint256 gasSecondsToConsume) external returns (uint256);\\n\\n    // read functions\\n    function readClaimableYield(address contractAddress) external view returns (uint256);\\n    function readYieldConfiguration(address contractAddress) external view returns (uint8);\\n    function readGasParams(address contractAddress) external view returns (uint256 etherSeconds, uint256 etherBalance, uint256 lastUpdated, GasMode);\\n}\\n\\ninterface IERC20Rebasing {\\n  // changes the yield mode of the caller and update the balance\\n  // to reflect the configuration\\n  function configure(YieldMode) external returns (uint256);\\n  // \\\"claimable\\\" yield mode accounts can call this this claim their yield\\n  // to another address\\n  function claim(address recipient, uint256 amount) external returns (uint256);\\n  // read the claimable amount for an account\\n  function getClaimableAmount(address account) external view returns (uint256);\\n}\\n\\ncontract MadWizard is ERC721URIStorage, Ownable {\\n    // Types\\n    enum Destiny {\\n        GREEN,\\n        PURPLE,\\n        RED\\n    }\\n\\n\\n    // NFT Variables\\n    uint256 private s_tokenCounter;\\n    uint256 internal constant MAX_CHANCE_VALUE = 100;\\n    uint256 private immutable i_maxSupply;\\n    string[] internal s_genTokenUris;\\n    bool private s_initialized;\\n    IBlast public constant BLAST = IBlast(0x4300000000000000000000000000000000000002);\\n    IERC20Rebasing public constant USDB = IERC20Rebasing(0x4200000000000000000000000000000000000022);\\n    IERC20Rebasing public constant WETH = IERC20Rebasing(0x4200000000000000000000000000000000000023);\\n\\n    \\n\\n    event NftMinted(address indexed minter, uint256 indexed tokenId);\\n\\n    constructor(\\n        string[3] memory genTokenUris,\\n        uint256 maxSupply\\n    ) ERC721 (\\\"MadWizzards\\\", \\\"MWIZ\\\") {\\n        _initializeContract(genTokenUris);\\n        s_tokenCounter = 0;\\n        i_maxSupply = maxSupply;\\n        USDB.configure(YieldMode.CLAIMABLE);\\n        WETH.configure(YieldMode.CLAIMABLE);\\n        BLAST.configureClaimableYield(); \\n        BLAST.configureClaimableGas(); \\n\\t\\tBLAST.configureGovernor(msg.sender);\\n    }\\n\\n    function requestNft() public payable {\\n        if (s_tokenCounter >= i_maxSupply) {\\n            revert MadWizard__MaxSupplyReached();\\n        }\\n        address wizardMinter = msg.sender;\\n        uint256 updatedItemID = s_tokenCounter;\\n        s_tokenCounter = s_tokenCounter + 1;\\n        uint256 randomWords = setNumber();\\n        uint256 moddedRng = randomWords % MAX_CHANCE_VALUE;\\n        Destiny genDestiny = getDestinyFromModdedRng(moddedRng);\\n        _safeMint(wizardMinter, updatedItemID);\\n        _setTokenURI(updatedItemID, s_genTokenUris[uint256(genDestiny)]);\\n        emit NftMinted(wizardMinter, s_tokenCounter);\\n        \\n    }\\n\\n    function setNumber() internal view returns (uint) {\\n        uint randNo = 0;\\n        randNo= uint (keccak256(abi.encodePacked (msg.sender, block.timestamp, randNo)));\\n        return randNo;\\n    }\\n\\n    function getChanceArray() public pure returns (uint256[3] memory) {\\n        return [60, 90, MAX_CHANCE_VALUE];\\n    }\\n\\n    function _initializeContract(string[3] memory genTokenUris) private {\\n        if (s_initialized) {\\n            revert MadWizard__AlreadyInitialized();\\n        }\\n        s_genTokenUris = genTokenUris;\\n        s_initialized = true;\\n    }\\n\\n    function getDestinyFromModdedRng(uint256 moddedRng) public pure returns (Destiny) {\\n        uint256 cumulativeSum = 0;\\n        uint256[3] memory chanceArray = getChanceArray();\\n        for (uint256 i = 0; i < chanceArray.length; i++) {\\n            if (moddedRng >= cumulativeSum && moddedRng < chanceArray[i]) {\\n                return Destiny(i);\\n            }\\n            cumulativeSum = chanceArray[i];\\n        }\\n        revert MadWizard__RangeOutOfBounds();\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        uint256 amount = address(this).balance;\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert MadWizard__TransferFailed();\\n        }\\n    }\\n\\n    // Blast FUNCTIONs\\n\\n    function claimMyContractsGas() external onlyOwner{\\n        BLAST.claimAllGas(address(this), msg.sender);\\n    }\\n    function claimMyContractsYield(address recipient, uint256 amount) external onlyOwner{\\n\\t    //This function is public meaning anyone can claim the yield\\n\\t\\tBLAST.claimYield(address(this), recipient, amount);\\n    }\\n\\tfunction claimMyContractsAllYield(address recipient) external onlyOwner{\\n\\t    //This function is public meaning anyone can claim the yield\\n\\t    BLAST.claimAllYield(address(this), recipient);\\n    }\\n\\n    function getgenTokenUris(uint256 index) public view returns (string memory) {\\n        return s_genTokenUris[index];\\n    }\\n\\n    function getInitialized() public view returns (bool) {\\n        return s_initialized;\\n    }\\n\\n    function getTokenCounter() public view returns (uint256) {\\n        return s_tokenCounter;\\n    }\\n}\",\"keccak256\":\"0xd96a0dbf04fc957f2153b7400318cc3c5ccc8590083d996af9b8f1c2fa851532\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620049983803806200499883398181016040528101906200003791906200089c565b6040518060400160405280600b81526020017f4d616457697a7a617264730000000000000000000000000000000000000000008152506040518060400160405280600481526020017f4d57495a000000000000000000000000000000000000000000000000000000008152508160009081620000b4919062000b43565b508060019081620000c6919062000b43565b505050620000e9620000dd620003af60201b60201c565b620003b760201b60201c565b620000fa826200047d60201b60201c565b6000600881905550806080818152505073420000000000000000000000000000000000002273ffffffffffffffffffffffffffffffffffffffff16631a33757d60026040518263ffffffff1660e01b81526004016200015a919062000caa565b6020604051808303816000875af11580156200017a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a0919062000cc7565b5073420000000000000000000000000000000000002373ffffffffffffffffffffffffffffffffffffffff16631a33757d60026040518263ffffffff1660e01b8152600401620001f1919062000caa565b6020604051808303816000875af115801562000211573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000237919062000cc7565b5073430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663f098767a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200029557600080fd5b505af1158015620002aa573d6000803e3d6000fd5b5050505073430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff16634e606c476040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200030b57600080fd5b505af115801562000320573d6000803e3d6000fd5b5050505073430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663eb864698336040518263ffffffff1660e01b815260040162000373919062000d3e565b600060405180830381600087803b1580156200038e57600080fd5b505af1158015620003a3573d6000803e3d6000fd5b50505050505062000d5b565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600a60009054906101000a900460ff1615620004c5576040517f0f78dda000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806009906003620004d8929190620004f7565b506001600a60006101000a81548160ff02191690831515021790555050565b82805482825590600052602060002090810192821562000544579160200282015b828111156200054357825182908162000532919062000b43565b509160200191906001019062000518565b5b50905062000553919062000557565b5090565b5b808211156200057b57600081816200057191906200057f565b5060010162000558565b5090565b5080546200058d906200093c565b6000825580601f10620005a15750620005c2565b601f016020900490600052602060002090810190620005c19190620005c5565b5b50565b5b80821115620005e0576000816000905550600101620005c6565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200064882620005fd565b810181811067ffffffffffffffff821117156200066a57620006696200060e565b5b80604052505050565b60006200067f620005e4565b90506200068d82826200063d565b919050565b600067ffffffffffffffff821115620006b057620006af6200060e565b5b602082029050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115620006e357620006e26200060e565b5b620006ee82620005fd565b9050602081019050919050565b60005b838110156200071b578082015181840152602081019050620006fe565b60008484015250505050565b60006200073e6200073884620006c5565b62000673565b9050828152602081018484840111156200075d576200075c620006c0565b5b6200076a848285620006fb565b509392505050565b600082601f8301126200078a5762000789620005f8565b5b81516200079c84826020860162000727565b91505092915050565b6000620007bc620007b68462000692565b62000673565b90508060208402830185811115620007d957620007d8620006bb565b5b835b818110156200082757805167ffffffffffffffff811115620008025762000801620005f8565b5b80860162000811898262000772565b85526020850194505050602081019050620007db565b5050509392505050565b600082601f830112620008495762000848620005f8565b5b600362000858848285620007a5565b91505092915050565b6000819050919050565b620008768162000861565b81146200088257600080fd5b50565b60008151905062000896816200086b565b92915050565b60008060408385031215620008b657620008b5620005ee565b5b600083015167ffffffffffffffff811115620008d757620008d6620005f3565b5b620008e58582860162000831565b9250506020620008f88582860162000885565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200095557607f821691505b6020821081036200096b576200096a6200090d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620009d57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000996565b620009e1868362000996565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000a2462000a1e62000a188462000861565b620009f9565b62000861565b9050919050565b6000819050919050565b62000a408362000a03565b62000a5862000a4f8262000a2b565b848454620009a3565b825550505050565b600090565b62000a6f62000a60565b62000a7c81848462000a35565b505050565b5b8181101562000aa45762000a9860008262000a65565b60018101905062000a82565b5050565b601f82111562000af35762000abd8162000971565b62000ac88462000986565b8101602085101562000ad8578190505b62000af062000ae78562000986565b83018262000a81565b50505b505050565b600082821c905092915050565b600062000b186000198460080262000af8565b1980831691505092915050565b600062000b33838362000b05565b9150826002028217905092915050565b62000b4e8262000902565b67ffffffffffffffff81111562000b6a5762000b696200060e565b5b62000b7682546200093c565b62000b8382828562000aa8565b600060209050601f83116001811462000bbb576000841562000ba6578287015190505b62000bb2858262000b25565b86555062000c22565b601f19841662000bcb8662000971565b60005b8281101562000bf55784890151825560018201915060208501945060208101905062000bce565b8683101562000c15578489015162000c11601f89168262000b05565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811062000c6d5762000c6c62000c2a565b5b50565b600081905062000c808262000c59565b919050565b600062000c928262000c70565b9050919050565b62000ca48162000c85565b82525050565b600060208201905062000cc1600083018462000c99565b92915050565b60006020828403121562000ce05762000cdf620005ee565b5b600062000cf08482850162000885565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000d268262000cf9565b9050919050565b62000d388162000d19565b82525050565b600060208201905062000d55600083018462000d2d565b92915050565b608051613c2162000d776000396000610e240152613c216000f3fe6080604052600436106101c25760003560e01c806377d5d2dc116100f7578063b88d4fde11610095578063e985e9c511610064578063e985e9c51461060f578063ee89dab41461064c578063f09ce7f614610677578063f2fde38b146106a0576101c2565b8063b88d4fde14610543578063be2abee11461056c578063c87b56dd14610595578063ca8579bc146105d2576101c2565b806397d75776116100d157806397d75776146104ba578063a22cb465146104e5578063aa1524911461050e578063ad5c464814610518576101c2565b806377d5d2dc1461044d5780638da5cb5b1461046457806395d89b411461048f576101c2565b80633ccfd60b116101645780636352211e1161013e5780636352211e146103915780636e02007d146103ce57806370a08231146103f9578063715018a614610436576101c2565b80633ccfd60b1461032657806342842e0e1461033d5780635dacf5f414610366576101c2565b8063095ea7b3116101a0578063095ea7b31461026c57806314d808401461029557806323b872dd146102d257806331a0edec146102fb576101c2565b806301ffc9a7146101c757806306fdde0314610204578063081812fc1461022f575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e99190612672565b6106c9565b6040516101fb91906126ba565b60405180910390f35b34801561021057600080fd5b5061021961072a565b6040516102269190612765565b60405180910390f35b34801561023b57600080fd5b50610256600480360381019061025191906127bd565b6107bc565b604051610263919061282b565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e9190612872565b610802565b005b3480156102a157600080fd5b506102bc60048036038101906102b791906127bd565b610919565b6040516102c99190612765565b60405180910390f35b3480156102de57600080fd5b506102f960048036038101906102f491906128b2565b6109c9565b005b34801561030757600080fd5b50610310610a29565b60405161031d9190612964565b60405180910390f35b34801561033257600080fd5b5061033b610a41565b005b34801561034957600080fd5b50610364600480360381019061035f91906128b2565b610af5565b005b34801561037257600080fd5b5061037b610b15565b6040516103889190612a2a565b60405180910390f35b34801561039d57600080fd5b506103b860048036038101906103b391906127bd565b610b40565b6040516103c5919061282b565b60405180910390f35b3480156103da57600080fd5b506103e3610bc6565b6040516103f09190612a54565b60405180910390f35b34801561040557600080fd5b50610420600480360381019061041b9190612a6f565b610bd0565b60405161042d9190612a54565b60405180910390f35b34801561044257600080fd5b5061044b610c87565b005b34801561045957600080fd5b50610462610c9b565b005b34801561047057600080fd5b50610479610d38565b604051610486919061282b565b60405180910390f35b34801561049b57600080fd5b506104a4610d62565b6040516104b19190612765565b60405180910390f35b3480156104c657600080fd5b506104cf610df4565b6040516104dc9190612abd565b60405180910390f35b3480156104f157600080fd5b5061050c60048036038101906105079190612b04565b610e0c565b005b610516610e22565b005b34801561052457600080fd5b5061052d610fe1565b60405161053a9190612964565b60405180910390f35b34801561054f57600080fd5b5061056a60048036038101906105659190612c79565b610ff9565b005b34801561057857600080fd5b50610593600480360381019061058e9190612872565b61105b565b005b3480156105a157600080fd5b506105bc60048036038101906105b791906127bd565b6110fc565b6040516105c99190612765565b60405180910390f35b3480156105de57600080fd5b506105f960048036038101906105f491906127bd565b61120e565b6040516106069190612d73565b60405180910390f35b34801561061b57600080fd5b5061063660048036038101906106319190612d8e565b6112da565b60405161064391906126ba565b60405180910390f35b34801561065857600080fd5b5061066161136e565b60405161066e91906126ba565b60405180910390f35b34801561068357600080fd5b5061069e60048036038101906106999190612a6f565b611385565b005b3480156106ac57600080fd5b506106c760048036038101906106c29190612a6f565b611423565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107235750610722826114a6565b5b9050919050565b60606000805461073990612dfd565b80601f016020809104026020016040519081016040528092919081815260200182805461076590612dfd565b80156107b25780601f10610787576101008083540402835291602001916107b2565b820191906000526020600020905b81548152906001019060200180831161079557829003601f168201915b5050505050905090565b60006107c782611588565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061080d82610b40565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361087d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087490612ea0565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661089c6115d3565b73ffffffffffffffffffffffffffffffffffffffff1614806108cb57506108ca816108c56115d3565b6112da565b5b61090a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090190612f32565b60405180910390fd5b61091483836115db565b505050565b60606009828154811061092f5761092e612f52565b5b90600052602060002001805461094490612dfd565b80601f016020809104026020016040519081016040528092919081815260200182805461097090612dfd565b80156109bd5780601f10610992576101008083540402835291602001916109bd565b820191906000526020600020905b8154815290600101906020018083116109a057829003601f168201915b50505050509050919050565b6109da6109d46115d3565b82611694565b610a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1090612ff3565b60405180910390fd5b610a24838383611729565b505050565b73420000000000000000000000000000000000002281565b610a49611a22565b600047905060003373ffffffffffffffffffffffffffffffffffffffff1682604051610a7490613044565b60006040518083038185875af1925050503d8060008114610ab1576040519150601f19603f3d011682016040523d82523d6000602084013e610ab6565b606091505b5050905080610af1576040517f7e942e6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b610b1083838360405180602001604052806000815250610ff9565b505050565b610b1d6125e4565b6040518060600160405280603c8152602001605a81526020016064815250905090565b600080610b4c83611aa0565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb4906130a5565b60405180910390fd5b80915050919050565b6000600854905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3790613137565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610c8f611a22565b610c996000611add565b565b610ca3611a22565b73430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663954fa5ee30336040518363ffffffff1660e01b8152600401610cf2929190613157565b6020604051808303816000875af1158015610d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d359190613195565b50565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610d7190612dfd565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9d90612dfd565b8015610dea5780601f10610dbf57610100808354040283529160200191610dea565b820191906000526020600020905b815481529060010190602001808311610dcd57829003601f168201915b5050505050905090565b73430000000000000000000000000000000000000281565b610e1e610e176115d3565b8383611ba3565b5050565b7f000000000000000000000000000000000000000000000000000000000000000060085410610e7d576040517fd38f962500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339050600060085490506001600854610e9891906131f1565b6008819055506000610ea8611d0f565b90506000606482610eb99190613254565b90506000610ec68261120e565b9050610ed28585611d4d565b610f94846009836002811115610eeb57610eea612cfc565b5b81548110610efc57610efb612f52565b5b906000526020600020018054610f1190612dfd565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3d90612dfd565b8015610f8a5780601f10610f5f57610100808354040283529160200191610f8a565b820191906000526020600020905b815481529060010190602001808311610f6d57829003601f168201915b5050505050611d6b565b6008548573ffffffffffffffffffffffffffffffffffffffff167ff2b290a76feb54be358b555507421d765609171aefa0646f109a653228ff81b860405160405180910390a35050505050565b73420000000000000000000000000000000000002381565b61100a6110046115d3565b83611694565b611049576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104090612ff3565b60405180910390fd5b61105584848484611e0f565b50505050565b611063611a22565b73430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663f97196623084846040518463ffffffff1660e01b81526004016110b493929190613285565b6020604051808303816000875af11580156110d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f79190613195565b505050565b606061110782611588565b600060066000848152602001908152602001600020805461112790612dfd565b80601f016020809104026020016040519081016040528092919081815260200182805461115390612dfd565b80156111a05780601f10611175576101008083540402835291602001916111a0565b820191906000526020600020905b81548152906001019060200180831161118357829003601f168201915b5050505050905060006111b1611e6b565b905060008151036111c6578192505050611209565b6000825111156111fb5780826040516020016111e39291906132f8565b60405160208183030381529060405292505050611209565b61120484611e82565b925050505b919050565b60008060009050600061121f610b15565b905060005b60038110156112a257828510158015611253575081816003811061124b5761124a612f52565b5b602002015185105b156112755780600281111561126b5761126a612cfc565b5b93505050506112d5565b81816003811061128857611287612f52565b5b60200201519250808061129a9061331c565b915050611224565b506040517fd272f90400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600a60009054906101000a900460ff16905090565b61138d611a22565b73430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663860043b630836040518363ffffffff1660e01b81526004016113dc929190613157565b6020604051808303816000875af11580156113fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141f9190613195565b5050565b61142b611a22565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361149a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611491906133d6565b60405180910390fd5b6114a381611add565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061157157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611581575061158082611eea565b5b9050919050565b61159181611f54565b6115d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c7906130a5565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661164e83610b40565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806116a083610b40565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806116e257506116e181856112da565b5b8061172057508373ffffffffffffffffffffffffffffffffffffffff16611708846107bc565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661174982610b40565b73ffffffffffffffffffffffffffffffffffffffff161461179f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179690613468565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361180e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611805906134fa565b60405180910390fd5b61181b8383836001611f95565b8273ffffffffffffffffffffffffffffffffffffffff1661183b82610b40565b73ffffffffffffffffffffffffffffffffffffffff1614611891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188890613468565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611a1d8383836001611f9b565b505050565b611a2a6115d3565b73ffffffffffffffffffffffffffffffffffffffff16611a48610d38565b73ffffffffffffffffffffffffffffffffffffffff1614611a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9590613566565b60405180910390fd5b565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c08906135d2565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611d0291906126ba565b60405180910390a3505050565b60008060009050334282604051602001611d2b9392919061365b565b6040516020818303038152906040528051906020012060001c90508091505090565b611d67828260405180602001604052806000815250611fa1565b5050565b611d7482611f54565b611db3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611daa9061370a565b60405180910390fd5b80600660008481526020019081526020016000209081611dd391906138cc565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051611e039190612a54565b60405180910390a15050565b611e1a848484611729565b611e2684848484611ffc565b611e65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5c90613a10565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611e8d82611588565b6000611e97611e6b565b90506000815111611eb75760405180602001604052806000815250611ee2565b80611ec184612183565b604051602001611ed29291906132f8565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611f7683611aa0565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b611fab8383612251565b611fb86000848484611ffc565b611ff7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fee90613a10565b60405180910390fd5b505050565b600061201d8473ffffffffffffffffffffffffffffffffffffffff1661246e565b15612176578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026120466115d3565b8786866040518563ffffffff1660e01b81526004016120689493929190613a85565b6020604051808303816000875af19250505080156120a457506040513d601f19601f820116820180604052508101906120a19190613ae6565b60015b612126573d80600081146120d4576040519150601f19603f3d011682016040523d82523d6000602084013e6120d9565b606091505b50600081510361211e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211590613a10565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061217b565b600190505b949350505050565b60606000600161219284612491565b01905060008167ffffffffffffffff8111156121b1576121b0612b4e565b5b6040519080825280601f01601f1916602001820160405280156121e35781602001600182028036833780820191505090505b509050600082602001820190505b600115612246578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161223a57612239613225565b5b049450600085036121f1575b819350505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036122c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b790613b5f565b60405180910390fd5b6122c981611f54565b15612309576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230090613bcb565b60405180910390fd5b612317600083836001611f95565b61232081611f54565b15612360576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235790613bcb565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461246a600083836001611f9b565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106124ef577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816124e5576124e4613225565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061252c576d04ee2d6d415b85acef8100000000838161252257612521613225565b5b0492506020810190505b662386f26fc10000831061255b57662386f26fc10000838161255157612550613225565b5b0492506010810190505b6305f5e1008310612584576305f5e100838161257a57612579613225565b5b0492506008810190505b61271083106125a957612710838161259f5761259e613225565b5b0492506004810190505b606483106125cc57606483816125c2576125c1613225565b5b0492506002810190505b600a83106125db576001810190505b80915050919050565b6040518060600160405280600390602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61264f8161261a565b811461265a57600080fd5b50565b60008135905061266c81612646565b92915050565b60006020828403121561268857612687612610565b5b60006126968482850161265d565b91505092915050565b60008115159050919050565b6126b48161269f565b82525050565b60006020820190506126cf60008301846126ab565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561270f5780820151818401526020810190506126f4565b60008484015250505050565b6000601f19601f8301169050919050565b6000612737826126d5565b61274181856126e0565b93506127518185602086016126f1565b61275a8161271b565b840191505092915050565b6000602082019050818103600083015261277f818461272c565b905092915050565b6000819050919050565b61279a81612787565b81146127a557600080fd5b50565b6000813590506127b781612791565b92915050565b6000602082840312156127d3576127d2612610565b5b60006127e1848285016127a8565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612815826127ea565b9050919050565b6128258161280a565b82525050565b6000602082019050612840600083018461281c565b92915050565b61284f8161280a565b811461285a57600080fd5b50565b60008135905061286c81612846565b92915050565b6000806040838503121561288957612888612610565b5b60006128978582860161285d565b92505060206128a8858286016127a8565b9150509250929050565b6000806000606084860312156128cb576128ca612610565b5b60006128d98682870161285d565b93505060206128ea8682870161285d565b92505060406128fb868287016127a8565b9150509250925092565b6000819050919050565b600061292a612925612920846127ea565b612905565b6127ea565b9050919050565b600061293c8261290f565b9050919050565b600061294e82612931565b9050919050565b61295e81612943565b82525050565b60006020820190506129796000830184612955565b92915050565b600060039050919050565b600081905092915050565b6000819050919050565b6129a881612787565b82525050565b60006129ba838361299f565b60208301905092915050565b6000602082019050919050565b6129dc8161297f565b6129e6818461298a565b92506129f182612995565b8060005b83811015612a22578151612a0987826129ae565b9650612a14836129c6565b9250506001810190506129f5565b505050505050565b6000606082019050612a3f60008301846129d3565b92915050565b612a4e81612787565b82525050565b6000602082019050612a696000830184612a45565b92915050565b600060208284031215612a8557612a84612610565b5b6000612a938482850161285d565b91505092915050565b6000612aa782612931565b9050919050565b612ab781612a9c565b82525050565b6000602082019050612ad26000830184612aae565b92915050565b612ae18161269f565b8114612aec57600080fd5b50565b600081359050612afe81612ad8565b92915050565b60008060408385031215612b1b57612b1a612610565b5b6000612b298582860161285d565b9250506020612b3a85828601612aef565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612b868261271b565b810181811067ffffffffffffffff82111715612ba557612ba4612b4e565b5b80604052505050565b6000612bb8612606565b9050612bc48282612b7d565b919050565b600067ffffffffffffffff821115612be457612be3612b4e565b5b612bed8261271b565b9050602081019050919050565b82818337600083830152505050565b6000612c1c612c1784612bc9565b612bae565b905082815260208101848484011115612c3857612c37612b49565b5b612c43848285612bfa565b509392505050565b600082601f830112612c6057612c5f612b44565b5b8135612c70848260208601612c09565b91505092915050565b60008060008060808587031215612c9357612c92612610565b5b6000612ca18782880161285d565b9450506020612cb28782880161285d565b9350506040612cc3878288016127a8565b925050606085013567ffffffffffffffff811115612ce457612ce3612615565b5b612cf087828801612c4b565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612d3c57612d3b612cfc565b5b50565b6000819050612d4d82612d2b565b919050565b6000612d5d82612d3f565b9050919050565b612d6d81612d52565b82525050565b6000602082019050612d886000830184612d64565b92915050565b60008060408385031215612da557612da4612610565b5b6000612db38582860161285d565b9250506020612dc48582860161285d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e1557607f821691505b602082108103612e2857612e27612dce565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e8a6021836126e0565b9150612e9582612e2e565b604082019050919050565b60006020820190508181036000830152612eb981612e7d565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612f1c603d836126e0565b9150612f2782612ec0565b604082019050919050565b60006020820190508181036000830152612f4b81612f0f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612fdd602d836126e0565b9150612fe882612f81565b604082019050919050565b6000602082019050818103600083015261300c81612fd0565b9050919050565b600081905092915050565b50565b600061302e600083613013565b91506130398261301e565b600082019050919050565b600061304f82613021565b9150819050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061308f6018836126e0565b915061309a82613059565b602082019050919050565b600060208201905081810360008301526130be81613082565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006131216029836126e0565b915061312c826130c5565b604082019050919050565b6000602082019050818103600083015261315081613114565b9050919050565b600060408201905061316c600083018561281c565b613179602083018461281c565b9392505050565b60008151905061318f81612791565b92915050565b6000602082840312156131ab576131aa612610565b5b60006131b984828501613180565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006131fc82612787565b915061320783612787565b925082820190508082111561321f5761321e6131c2565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061325f82612787565b915061326a83612787565b92508261327a57613279613225565b5b828206905092915050565b600060608201905061329a600083018661281c565b6132a7602083018561281c565b6132b46040830184612a45565b949350505050565b600081905092915050565b60006132d2826126d5565b6132dc81856132bc565b93506132ec8185602086016126f1565b80840191505092915050565b600061330482856132c7565b915061331082846132c7565b91508190509392505050565b600061332782612787565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613359576133586131c2565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006133c06026836126e0565b91506133cb82613364565b604082019050919050565b600060208201905081810360008301526133ef816133b3565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006134526025836126e0565b915061345d826133f6565b604082019050919050565b6000602082019050818103600083015261348181613445565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006134e46024836126e0565b91506134ef82613488565b604082019050919050565b60006020820190508181036000830152613513816134d7565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006135506020836126e0565b915061355b8261351a565b602082019050919050565b6000602082019050818103600083015261357f81613543565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006135bc6019836126e0565b91506135c782613586565b602082019050919050565b600060208201905081810360008301526135eb816135af565b9050919050565b60008160601b9050919050565b600061360a826135f2565b9050919050565b600061361c826135ff565b9050919050565b61363461362f8261280a565b613611565b82525050565b6000819050919050565b61365561365082612787565b61363a565b82525050565b60006136678286613623565b6014820191506136778285613644565b6020820191506136878284613644565b602082019150819050949350505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006136f4602e836126e0565b91506136ff82613698565b604082019050919050565b60006020820190508181036000830152613723816136e7565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261378c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261374f565b613796868361374f565b95508019841693508086168417925050509392505050565b60006137c96137c46137bf84612787565b612905565b612787565b9050919050565b6000819050919050565b6137e3836137ae565b6137f76137ef826137d0565b84845461375c565b825550505050565b600090565b61380c6137ff565b6138178184846137da565b505050565b5b8181101561383b57613830600082613804565b60018101905061381d565b5050565b601f821115613880576138518161372a565b61385a8461373f565b81016020851015613869578190505b61387d6138758561373f565b83018261381c565b50505b505050565b600082821c905092915050565b60006138a360001984600802613885565b1980831691505092915050565b60006138bc8383613892565b9150826002028217905092915050565b6138d5826126d5565b67ffffffffffffffff8111156138ee576138ed612b4e565b5b6138f88254612dfd565b61390382828561383f565b600060209050601f8311600181146139365760008415613924578287015190505b61392e85826138b0565b865550613996565b601f1984166139448661372a565b60005b8281101561396c57848901518255600182019150602085019450602081019050613947565b868310156139895784890151613985601f891682613892565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006139fa6032836126e0565b9150613a058261399e565b604082019050919050565b60006020820190508181036000830152613a29816139ed565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000613a5782613a30565b613a618185613a3b565b9350613a718185602086016126f1565b613a7a8161271b565b840191505092915050565b6000608082019050613a9a600083018761281c565b613aa7602083018661281c565b613ab46040830185612a45565b8181036060830152613ac68184613a4c565b905095945050505050565b600081519050613ae081612646565b92915050565b600060208284031215613afc57613afb612610565b5b6000613b0a84828501613ad1565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613b496020836126e0565b9150613b5482613b13565b602082019050919050565b60006020820190508181036000830152613b7881613b3c565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613bb5601c836126e0565b9150613bc082613b7f565b602082019050919050565b60006020820190508181036000830152613be481613ba8565b905091905056fea2646970667358221220644b99f37d28e2e6e7defca5ff795bcc49ef1a83b5e3f0d12dbfebc07ed7b1e164736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c806377d5d2dc116100f7578063b88d4fde11610095578063e985e9c511610064578063e985e9c51461060f578063ee89dab41461064c578063f09ce7f614610677578063f2fde38b146106a0576101c2565b8063b88d4fde14610543578063be2abee11461056c578063c87b56dd14610595578063ca8579bc146105d2576101c2565b806397d75776116100d157806397d75776146104ba578063a22cb465146104e5578063aa1524911461050e578063ad5c464814610518576101c2565b806377d5d2dc1461044d5780638da5cb5b1461046457806395d89b411461048f576101c2565b80633ccfd60b116101645780636352211e1161013e5780636352211e146103915780636e02007d146103ce57806370a08231146103f9578063715018a614610436576101c2565b80633ccfd60b1461032657806342842e0e1461033d5780635dacf5f414610366576101c2565b8063095ea7b3116101a0578063095ea7b31461026c57806314d808401461029557806323b872dd146102d257806331a0edec146102fb576101c2565b806301ffc9a7146101c757806306fdde0314610204578063081812fc1461022f575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e99190612672565b6106c9565b6040516101fb91906126ba565b60405180910390f35b34801561021057600080fd5b5061021961072a565b6040516102269190612765565b60405180910390f35b34801561023b57600080fd5b50610256600480360381019061025191906127bd565b6107bc565b604051610263919061282b565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e9190612872565b610802565b005b3480156102a157600080fd5b506102bc60048036038101906102b791906127bd565b610919565b6040516102c99190612765565b60405180910390f35b3480156102de57600080fd5b506102f960048036038101906102f491906128b2565b6109c9565b005b34801561030757600080fd5b50610310610a29565b60405161031d9190612964565b60405180910390f35b34801561033257600080fd5b5061033b610a41565b005b34801561034957600080fd5b50610364600480360381019061035f91906128b2565b610af5565b005b34801561037257600080fd5b5061037b610b15565b6040516103889190612a2a565b60405180910390f35b34801561039d57600080fd5b506103b860048036038101906103b391906127bd565b610b40565b6040516103c5919061282b565b60405180910390f35b3480156103da57600080fd5b506103e3610bc6565b6040516103f09190612a54565b60405180910390f35b34801561040557600080fd5b50610420600480360381019061041b9190612a6f565b610bd0565b60405161042d9190612a54565b60405180910390f35b34801561044257600080fd5b5061044b610c87565b005b34801561045957600080fd5b50610462610c9b565b005b34801561047057600080fd5b50610479610d38565b604051610486919061282b565b60405180910390f35b34801561049b57600080fd5b506104a4610d62565b6040516104b19190612765565b60405180910390f35b3480156104c657600080fd5b506104cf610df4565b6040516104dc9190612abd565b60405180910390f35b3480156104f157600080fd5b5061050c60048036038101906105079190612b04565b610e0c565b005b610516610e22565b005b34801561052457600080fd5b5061052d610fe1565b60405161053a9190612964565b60405180910390f35b34801561054f57600080fd5b5061056a60048036038101906105659190612c79565b610ff9565b005b34801561057857600080fd5b50610593600480360381019061058e9190612872565b61105b565b005b3480156105a157600080fd5b506105bc60048036038101906105b791906127bd565b6110fc565b6040516105c99190612765565b60405180910390f35b3480156105de57600080fd5b506105f960048036038101906105f491906127bd565b61120e565b6040516106069190612d73565b60405180910390f35b34801561061b57600080fd5b5061063660048036038101906106319190612d8e565b6112da565b60405161064391906126ba565b60405180910390f35b34801561065857600080fd5b5061066161136e565b60405161066e91906126ba565b60405180910390f35b34801561068357600080fd5b5061069e60048036038101906106999190612a6f565b611385565b005b3480156106ac57600080fd5b506106c760048036038101906106c29190612a6f565b611423565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107235750610722826114a6565b5b9050919050565b60606000805461073990612dfd565b80601f016020809104026020016040519081016040528092919081815260200182805461076590612dfd565b80156107b25780601f10610787576101008083540402835291602001916107b2565b820191906000526020600020905b81548152906001019060200180831161079557829003601f168201915b5050505050905090565b60006107c782611588565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061080d82610b40565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361087d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087490612ea0565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661089c6115d3565b73ffffffffffffffffffffffffffffffffffffffff1614806108cb57506108ca816108c56115d3565b6112da565b5b61090a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090190612f32565b60405180910390fd5b61091483836115db565b505050565b60606009828154811061092f5761092e612f52565b5b90600052602060002001805461094490612dfd565b80601f016020809104026020016040519081016040528092919081815260200182805461097090612dfd565b80156109bd5780601f10610992576101008083540402835291602001916109bd565b820191906000526020600020905b8154815290600101906020018083116109a057829003601f168201915b50505050509050919050565b6109da6109d46115d3565b82611694565b610a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1090612ff3565b60405180910390fd5b610a24838383611729565b505050565b73420000000000000000000000000000000000002281565b610a49611a22565b600047905060003373ffffffffffffffffffffffffffffffffffffffff1682604051610a7490613044565b60006040518083038185875af1925050503d8060008114610ab1576040519150601f19603f3d011682016040523d82523d6000602084013e610ab6565b606091505b5050905080610af1576040517f7e942e6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b610b1083838360405180602001604052806000815250610ff9565b505050565b610b1d6125e4565b6040518060600160405280603c8152602001605a81526020016064815250905090565b600080610b4c83611aa0565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb4906130a5565b60405180910390fd5b80915050919050565b6000600854905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3790613137565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610c8f611a22565b610c996000611add565b565b610ca3611a22565b73430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663954fa5ee30336040518363ffffffff1660e01b8152600401610cf2929190613157565b6020604051808303816000875af1158015610d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d359190613195565b50565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610d7190612dfd565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9d90612dfd565b8015610dea5780601f10610dbf57610100808354040283529160200191610dea565b820191906000526020600020905b815481529060010190602001808311610dcd57829003601f168201915b5050505050905090565b73430000000000000000000000000000000000000281565b610e1e610e176115d3565b8383611ba3565b5050565b7f000000000000000000000000000000000000000000000000000000000000000060085410610e7d576040517fd38f962500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339050600060085490506001600854610e9891906131f1565b6008819055506000610ea8611d0f565b90506000606482610eb99190613254565b90506000610ec68261120e565b9050610ed28585611d4d565b610f94846009836002811115610eeb57610eea612cfc565b5b81548110610efc57610efb612f52565b5b906000526020600020018054610f1190612dfd565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3d90612dfd565b8015610f8a5780601f10610f5f57610100808354040283529160200191610f8a565b820191906000526020600020905b815481529060010190602001808311610f6d57829003601f168201915b5050505050611d6b565b6008548573ffffffffffffffffffffffffffffffffffffffff167ff2b290a76feb54be358b555507421d765609171aefa0646f109a653228ff81b860405160405180910390a35050505050565b73420000000000000000000000000000000000002381565b61100a6110046115d3565b83611694565b611049576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104090612ff3565b60405180910390fd5b61105584848484611e0f565b50505050565b611063611a22565b73430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663f97196623084846040518463ffffffff1660e01b81526004016110b493929190613285565b6020604051808303816000875af11580156110d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f79190613195565b505050565b606061110782611588565b600060066000848152602001908152602001600020805461112790612dfd565b80601f016020809104026020016040519081016040528092919081815260200182805461115390612dfd565b80156111a05780601f10611175576101008083540402835291602001916111a0565b820191906000526020600020905b81548152906001019060200180831161118357829003601f168201915b5050505050905060006111b1611e6b565b905060008151036111c6578192505050611209565b6000825111156111fb5780826040516020016111e39291906132f8565b60405160208183030381529060405292505050611209565b61120484611e82565b925050505b919050565b60008060009050600061121f610b15565b905060005b60038110156112a257828510158015611253575081816003811061124b5761124a612f52565b5b602002015185105b156112755780600281111561126b5761126a612cfc565b5b93505050506112d5565b81816003811061128857611287612f52565b5b60200201519250808061129a9061331c565b915050611224565b506040517fd272f90400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600a60009054906101000a900460ff16905090565b61138d611a22565b73430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663860043b630836040518363ffffffff1660e01b81526004016113dc929190613157565b6020604051808303816000875af11580156113fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141f9190613195565b5050565b61142b611a22565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361149a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611491906133d6565b60405180910390fd5b6114a381611add565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061157157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611581575061158082611eea565b5b9050919050565b61159181611f54565b6115d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c7906130a5565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661164e83610b40565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806116a083610b40565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806116e257506116e181856112da565b5b8061172057508373ffffffffffffffffffffffffffffffffffffffff16611708846107bc565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661174982610b40565b73ffffffffffffffffffffffffffffffffffffffff161461179f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179690613468565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361180e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611805906134fa565b60405180910390fd5b61181b8383836001611f95565b8273ffffffffffffffffffffffffffffffffffffffff1661183b82610b40565b73ffffffffffffffffffffffffffffffffffffffff1614611891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188890613468565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611a1d8383836001611f9b565b505050565b611a2a6115d3565b73ffffffffffffffffffffffffffffffffffffffff16611a48610d38565b73ffffffffffffffffffffffffffffffffffffffff1614611a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9590613566565b60405180910390fd5b565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c08906135d2565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611d0291906126ba565b60405180910390a3505050565b60008060009050334282604051602001611d2b9392919061365b565b6040516020818303038152906040528051906020012060001c90508091505090565b611d67828260405180602001604052806000815250611fa1565b5050565b611d7482611f54565b611db3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611daa9061370a565b60405180910390fd5b80600660008481526020019081526020016000209081611dd391906138cc565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051611e039190612a54565b60405180910390a15050565b611e1a848484611729565b611e2684848484611ffc565b611e65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5c90613a10565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611e8d82611588565b6000611e97611e6b565b90506000815111611eb75760405180602001604052806000815250611ee2565b80611ec184612183565b604051602001611ed29291906132f8565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611f7683611aa0565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b611fab8383612251565b611fb86000848484611ffc565b611ff7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fee90613a10565b60405180910390fd5b505050565b600061201d8473ffffffffffffffffffffffffffffffffffffffff1661246e565b15612176578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026120466115d3565b8786866040518563ffffffff1660e01b81526004016120689493929190613a85565b6020604051808303816000875af19250505080156120a457506040513d601f19601f820116820180604052508101906120a19190613ae6565b60015b612126573d80600081146120d4576040519150601f19603f3d011682016040523d82523d6000602084013e6120d9565b606091505b50600081510361211e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211590613a10565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061217b565b600190505b949350505050565b60606000600161219284612491565b01905060008167ffffffffffffffff8111156121b1576121b0612b4e565b5b6040519080825280601f01601f1916602001820160405280156121e35781602001600182028036833780820191505090505b509050600082602001820190505b600115612246578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161223a57612239613225565b5b049450600085036121f1575b819350505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036122c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b790613b5f565b60405180910390fd5b6122c981611f54565b15612309576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230090613bcb565b60405180910390fd5b612317600083836001611f95565b61232081611f54565b15612360576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235790613bcb565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461246a600083836001611f9b565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106124ef577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816124e5576124e4613225565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061252c576d04ee2d6d415b85acef8100000000838161252257612521613225565b5b0492506020810190505b662386f26fc10000831061255b57662386f26fc10000838161255157612550613225565b5b0492506010810190505b6305f5e1008310612584576305f5e100838161257a57612579613225565b5b0492506008810190505b61271083106125a957612710838161259f5761259e613225565b5b0492506004810190505b606483106125cc57606483816125c2576125c1613225565b5b0492506002810190505b600a83106125db576001810190505b80915050919050565b6040518060600160405280600390602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61264f8161261a565b811461265a57600080fd5b50565b60008135905061266c81612646565b92915050565b60006020828403121561268857612687612610565b5b60006126968482850161265d565b91505092915050565b60008115159050919050565b6126b48161269f565b82525050565b60006020820190506126cf60008301846126ab565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561270f5780820151818401526020810190506126f4565b60008484015250505050565b6000601f19601f8301169050919050565b6000612737826126d5565b61274181856126e0565b93506127518185602086016126f1565b61275a8161271b565b840191505092915050565b6000602082019050818103600083015261277f818461272c565b905092915050565b6000819050919050565b61279a81612787565b81146127a557600080fd5b50565b6000813590506127b781612791565b92915050565b6000602082840312156127d3576127d2612610565b5b60006127e1848285016127a8565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612815826127ea565b9050919050565b6128258161280a565b82525050565b6000602082019050612840600083018461281c565b92915050565b61284f8161280a565b811461285a57600080fd5b50565b60008135905061286c81612846565b92915050565b6000806040838503121561288957612888612610565b5b60006128978582860161285d565b92505060206128a8858286016127a8565b9150509250929050565b6000806000606084860312156128cb576128ca612610565b5b60006128d98682870161285d565b93505060206128ea8682870161285d565b92505060406128fb868287016127a8565b9150509250925092565b6000819050919050565b600061292a612925612920846127ea565b612905565b6127ea565b9050919050565b600061293c8261290f565b9050919050565b600061294e82612931565b9050919050565b61295e81612943565b82525050565b60006020820190506129796000830184612955565b92915050565b600060039050919050565b600081905092915050565b6000819050919050565b6129a881612787565b82525050565b60006129ba838361299f565b60208301905092915050565b6000602082019050919050565b6129dc8161297f565b6129e6818461298a565b92506129f182612995565b8060005b83811015612a22578151612a0987826129ae565b9650612a14836129c6565b9250506001810190506129f5565b505050505050565b6000606082019050612a3f60008301846129d3565b92915050565b612a4e81612787565b82525050565b6000602082019050612a696000830184612a45565b92915050565b600060208284031215612a8557612a84612610565b5b6000612a938482850161285d565b91505092915050565b6000612aa782612931565b9050919050565b612ab781612a9c565b82525050565b6000602082019050612ad26000830184612aae565b92915050565b612ae18161269f565b8114612aec57600080fd5b50565b600081359050612afe81612ad8565b92915050565b60008060408385031215612b1b57612b1a612610565b5b6000612b298582860161285d565b9250506020612b3a85828601612aef565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612b868261271b565b810181811067ffffffffffffffff82111715612ba557612ba4612b4e565b5b80604052505050565b6000612bb8612606565b9050612bc48282612b7d565b919050565b600067ffffffffffffffff821115612be457612be3612b4e565b5b612bed8261271b565b9050602081019050919050565b82818337600083830152505050565b6000612c1c612c1784612bc9565b612bae565b905082815260208101848484011115612c3857612c37612b49565b5b612c43848285612bfa565b509392505050565b600082601f830112612c6057612c5f612b44565b5b8135612c70848260208601612c09565b91505092915050565b60008060008060808587031215612c9357612c92612610565b5b6000612ca18782880161285d565b9450506020612cb28782880161285d565b9350506040612cc3878288016127a8565b925050606085013567ffffffffffffffff811115612ce457612ce3612615565b5b612cf087828801612c4b565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612d3c57612d3b612cfc565b5b50565b6000819050612d4d82612d2b565b919050565b6000612d5d82612d3f565b9050919050565b612d6d81612d52565b82525050565b6000602082019050612d886000830184612d64565b92915050565b60008060408385031215612da557612da4612610565b5b6000612db38582860161285d565b9250506020612dc48582860161285d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e1557607f821691505b602082108103612e2857612e27612dce565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e8a6021836126e0565b9150612e9582612e2e565b604082019050919050565b60006020820190508181036000830152612eb981612e7d565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612f1c603d836126e0565b9150612f2782612ec0565b604082019050919050565b60006020820190508181036000830152612f4b81612f0f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612fdd602d836126e0565b9150612fe882612f81565b604082019050919050565b6000602082019050818103600083015261300c81612fd0565b9050919050565b600081905092915050565b50565b600061302e600083613013565b91506130398261301e565b600082019050919050565b600061304f82613021565b9150819050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061308f6018836126e0565b915061309a82613059565b602082019050919050565b600060208201905081810360008301526130be81613082565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006131216029836126e0565b915061312c826130c5565b604082019050919050565b6000602082019050818103600083015261315081613114565b9050919050565b600060408201905061316c600083018561281c565b613179602083018461281c565b9392505050565b60008151905061318f81612791565b92915050565b6000602082840312156131ab576131aa612610565b5b60006131b984828501613180565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006131fc82612787565b915061320783612787565b925082820190508082111561321f5761321e6131c2565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061325f82612787565b915061326a83612787565b92508261327a57613279613225565b5b828206905092915050565b600060608201905061329a600083018661281c565b6132a7602083018561281c565b6132b46040830184612a45565b949350505050565b600081905092915050565b60006132d2826126d5565b6132dc81856132bc565b93506132ec8185602086016126f1565b80840191505092915050565b600061330482856132c7565b915061331082846132c7565b91508190509392505050565b600061332782612787565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613359576133586131c2565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006133c06026836126e0565b91506133cb82613364565b604082019050919050565b600060208201905081810360008301526133ef816133b3565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006134526025836126e0565b915061345d826133f6565b604082019050919050565b6000602082019050818103600083015261348181613445565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006134e46024836126e0565b91506134ef82613488565b604082019050919050565b60006020820190508181036000830152613513816134d7565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006135506020836126e0565b915061355b8261351a565b602082019050919050565b6000602082019050818103600083015261357f81613543565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006135bc6019836126e0565b91506135c782613586565b602082019050919050565b600060208201905081810360008301526135eb816135af565b9050919050565b60008160601b9050919050565b600061360a826135f2565b9050919050565b600061361c826135ff565b9050919050565b61363461362f8261280a565b613611565b82525050565b6000819050919050565b61365561365082612787565b61363a565b82525050565b60006136678286613623565b6014820191506136778285613644565b6020820191506136878284613644565b602082019150819050949350505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006136f4602e836126e0565b91506136ff82613698565b604082019050919050565b60006020820190508181036000830152613723816136e7565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261378c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261374f565b613796868361374f565b95508019841693508086168417925050509392505050565b60006137c96137c46137bf84612787565b612905565b612787565b9050919050565b6000819050919050565b6137e3836137ae565b6137f76137ef826137d0565b84845461375c565b825550505050565b600090565b61380c6137ff565b6138178184846137da565b505050565b5b8181101561383b57613830600082613804565b60018101905061381d565b5050565b601f821115613880576138518161372a565b61385a8461373f565b81016020851015613869578190505b61387d6138758561373f565b83018261381c565b50505b505050565b600082821c905092915050565b60006138a360001984600802613885565b1980831691505092915050565b60006138bc8383613892565b9150826002028217905092915050565b6138d5826126d5565b67ffffffffffffffff8111156138ee576138ed612b4e565b5b6138f88254612dfd565b61390382828561383f565b600060209050601f8311600181146139365760008415613924578287015190505b61392e85826138b0565b865550613996565b601f1984166139448661372a565b60005b8281101561396c57848901518255600182019150602085019450602081019050613947565b868310156139895784890151613985601f891682613892565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006139fa6032836126e0565b9150613a058261399e565b604082019050919050565b60006020820190508181036000830152613a29816139ed565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000613a5782613a30565b613a618185613a3b565b9350613a718185602086016126f1565b613a7a8161271b565b840191505092915050565b6000608082019050613a9a600083018761281c565b613aa7602083018661281c565b613ab46040830185612a45565b8181036060830152613ac68184613a4c565b905095945050505050565b600081519050613ae081612646565b92915050565b600060208284031215613afc57613afb612610565b5b6000613b0a84828501613ad1565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613b496020836126e0565b9150613b5482613b13565b602082019050919050565b60006020820190508181036000830152613b7881613b3c565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613bb5601c836126e0565b9150613bc082613b7f565b602082019050919050565b60006020820190508181036000830152613be481613ba8565b905091905056fea2646970667358221220644b99f37d28e2e6e7defca5ff795bcc49ef1a83b5e3f0d12dbfebc07ed7b1e164736f6c63430008120033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 166,
        "contract": "contracts/MadWizard.sol:MadWizard",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 168,
        "contract": "contracts/MadWizard.sol:MadWizard",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 172,
        "contract": "contracts/MadWizard.sol:MadWizard",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 176,
        "contract": "contracts/MadWizard.sol:MadWizard",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 180,
        "contract": "contracts/MadWizard.sol:MadWizard",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 186,
        "contract": "contracts/MadWizard.sol:MadWizard",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1217,
        "contract": "contracts/MadWizard.sol:MadWizard",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/MadWizard.sol:MadWizard",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3201,
        "contract": "contracts/MadWizard.sol:MadWizard",
        "label": "s_tokenCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3209,
        "contract": "contracts/MadWizard.sol:MadWizard",
        "label": "s_genTokenUris",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 3211,
        "contract": "contracts/MadWizard.sol:MadWizard",
        "label": "s_initialized",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}